// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("UberRides")
@class UBSDKRidesScope;
@class NSCoder;

/// Stores information about an access token used for authorizing requests.
SWIFT_CLASS_NAMED("AccessToken")
@interface UBSDKAccessToken : NSObject <NSCoding>
/// String containing the bearer token.
@property (nonatomic, readonly, copy) NSString * _Nullable tokenString;
/// String containing the refresh token.
@property (nonatomic, readonly, copy) NSString * _Nullable refreshToken;
/// The expiration date for this access token
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
/// The scopes this token is valid for
@property (nonatomic, readonly, copy) NSArray<UBSDKRidesScope *> * _Nonnull grantedScopes;
/// Initializes an AccessToken with the provided tokenString
/// \param tokenString The tokenString to use for this AccessToken
///
///
/// returns:
/// an initialized AccessToken object
- (nonnull instancetype)initWithTokenString:(NSString * _Nonnull)tokenString OBJC_DESIGNATED_INITIALIZER;
/// Initializer to build an accessToken from the provided NSCoder. Allows for
/// serialization of an AccessToken
/// \param decoder The NSCoder to decode the AcccessToken from
///
///
/// returns:
/// An initialized AccessToken, or nil if something went wrong
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the AccessToken. Required to allow for serialization
/// \param coder The NSCoder to encode the access token on
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSError;

/// Protocol for defining a deeplink that can be executed to open an external app
SWIFT_PROTOCOL_NAMED("Deeplinking")
@protocol UBSDKDeeplinking
/// The deeplink scheme to use, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nonnull scheme;
/// The domain of the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
/// The path of the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// The query parameter items for the deeplink, where a deeplink takes the form scheme://domain/path?query
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;
/// The deeplink URL that the deeplink will execute
@property (nonatomic, readonly, copy) NSURL * _Nonnull deeplinkURL;
- (void)executeWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("BaseDeeplink")
@interface UBSDKBaseDeeplink : NSObject <UBSDKDeeplinking>
/// The scheme for the auth deeplink
@property (nonatomic, copy) NSString * _Nonnull scheme;
/// The domain for the auth deeplink
@property (nonatomic, copy) NSString * _Nonnull domain;
/// The path for the auth deeplink
@property (nonatomic, copy) NSString * _Nonnull path;
/// The array of query items the deeplink will include
@property (nonatomic, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;
@property (nonatomic, readonly, copy) NSURL * _Nonnull deeplinkURL;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme domain:(NSString * _Nonnull)domain path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems OBJC_DESIGNATED_INITIALIZER;
/// Executes the base deeplink, accounting for the possiblity of an alert appearing
/// on iOS 9+
/// \param completion The completion block to execute once the deeplink has
/// executed. Passes in True if the url was successfully opened, false otherwise.
///
- (void)executeWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AppStoreDeeplink")
@interface UBSDKAppStoreDeeplink : UBSDKBaseDeeplink
/// Initializes an App Store Deeplink to bring the user to the appstore
///
/// returns:
/// An initialized AppStoreDeeplink
- (nonnull instancetype)initWithUserAgent:(NSString * _Nullable)userAgent OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme domain:(NSString * _Nonnull)domain path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AuthenticationDeeplink")
@interface UBSDKAuthenticationDeeplink : UBSDKBaseDeeplink
/// Initializes an Authentication Deeplink to request the provided scopes
/// \param scopes An array of RidesScopes you would like to request
///
///
/// returns:
/// An initialized AuthenticationDeeplink
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme domain:(NSString * _Nonnull)domain path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end

enum CallbackURIType : NSInteger;

/// Base class for authorization flows that use the LoginView.
SWIFT_CLASS_NAMED("BaseAuthenticator")
@interface UBSDKBaseAuthenticator : NSObject
/// Optional identifier for saving the access token in keychain
@property (nonatomic, copy) NSString * _Nullable accessTokenIdentifier;
/// Optional access group for saving the access token in keychain
@property (nonatomic, copy) NSString * _Nullable keychainAccessGroup;
/// Completion block for when login has completed
@property (nonatomic, copy) void (^ _Nullable loginCompletion)(UBSDKAccessToken * _Nullable, NSError * _Nullable);
/// Scopes to request during login
@property (nonatomic, copy) NSArray<UBSDKRidesScope *> * _Nonnull scopes;
/// The Callback URL Type to use for this authentication method
@property (nonatomic) enum CallbackURIType callbackURIType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIViewController;

/// Base class for authorization flows that use the LoginView.
SWIFT_CLASS("_TtC9UberRides22LoginViewAuthenticator")
@interface LoginViewAuthenticator : UBSDKBaseAuthenticator
/// View controller that will present the login
@property (nonatomic, strong) UIViewController * _Nonnull presentingViewController;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AuthorizationCodeGrantAuthenticator")
@interface UBSDKAuthorizationCodeGrantAuthenticator : LoginViewAuthenticator
@property (nonatomic, copy) NSString * _Nullable state;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes state:(NSString * _Nullable)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes;
@end



/// An enum to represent the possible callback URI types. Each form of authorization
/// could potentially use a different URI, these are the possible types.
/// <ul>
///   <li>
///     AuthorizationCode: Callback URI to use for Authorization Code Grant flow
///   </li>
///   <li>
///     General:           Callback URI to use for any flow
///   </li>
///   <li>
///     Implicit:          Callback URI to use for Implicit Grant flow
///   </li>
///   <li>
///     Native:            Callback URI to use for Native (SSO) flow
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, CallbackURIType) {
  CallbackURITypeAuthorizationCode = 0,
  CallbackURITypeGeneral = 1,
  CallbackURITypeImplicit = 2,
  CallbackURITypeNative = 3,
};

@class NSBundle;
@class WKProcessPool;

/// Class responsible for handling all of the SDK Configuration options. Provides
/// default values for Application-wide configuration properties. All properties are
/// configurable via the respective setter method
SWIFT_CLASS_NAMED("Configuration")
@interface UBSDKConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UBSDKConfiguration * _Nonnull shared;)
+ (UBSDKConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(UBSDKConfiguration * _Nonnull)value;
/// The .plist file to use, default is Info.plist
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull plistName;)
+ (NSString * _Nonnull)plistName SWIFT_WARN_UNUSED_RESULT;
+ (void)setPlistName:(NSString * _Nonnull)value;
/// The bundle that contains the .plist file. Default is the mainBundle()
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
@property (nonatomic, strong) WKProcessPool * _Nonnull processPool;
/// Gets the client ID of this app. Defaults to the value stored in your Application’s
/// plist if not set (UberClientID)
///
/// returns:
/// The string to use for the Client ID
@property (nonatomic, copy) NSString * _Nonnull clientID;
/// Gets the display name of this app. Defaults to the value stored in your Appication’s
/// plist if not set (UberClientID)
///
/// returns:
/// The app’s name
@property (nonatomic, copy) NSString * _Nonnull appDisplayName;
/// Gets the Server Token of this app. Defaults to the value stored in your Appication’s
/// plist if not set (UberServerToken)
/// Optional. Used by the Request Button to get time estimates without requiring
/// login
///
/// returns:
/// The string Representing your app’s server token
@property (nonatomic, copy) NSString * _Nullable serverToken;
/// Gets the default keychain access group to save access tokens to. Advanced setting
/// for sharing access tokens between multiple of your apps. Defaults an empty string
///
/// returns:
/// The default keychain access group to use
@property (nonatomic, copy) NSString * _Nonnull defaultKeychainAccessGroup;
/// Gets the default key to use when saving access tokens to the keychain. Defaults
/// to using “RidesAccessTokenKey”
///
/// returns:
/// The default access token identifier to use
@property (nonatomic, copy) NSString * _Nonnull defaultAccessTokenIdentifier;
/// Returns if sandbox is enabled or not
///
/// returns:
/// true if Sandbox is enabled, false otherwise
@property (nonatomic) BOOL isSandbox;
/// Returns if the fallback to use Authorization Code Grant is enabled. If true,
/// a failed SSO attempt will follow up with an attempt to do Authorization Code Grant
/// (if requesting priveleged scopes). If false, the user will be redirected to the app store
///
/// returns:
/// true if fallback enabled, false otherwise
@property (nonatomic) BOOL useFallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The current version of the SDK as a string
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Resets all of the Configuration’s values to default
+ (void)restoreDefaults;
/// Gets the callback URIString of this app. Defaults to the value stored in your Application’s
/// plist if not set (UberCallbackURI)
///
/// returns:
/// The string to use for the Callback URI
- (NSString * _Nonnull)getCallbackURIString SWIFT_WARN_UNUSED_RESULT;
/// Gets the callback URIString for the given CallbackURIType. Defaults to the value
/// stored in your Applications’ plist (under the UberCallbackURIs key). If the requested
/// type is not defined in your plist, it will attempt to use the .General type. If the
/// .General type is not defined, it will attempt to use the value stored under the UberCallbackURI key.
/// Throws a fatal error if no value can be determined
/// \param type The CallbackURIType to get a callback string for
///
///
/// returns:
/// The callbackURIString for the the requested type
- (NSString * _Nonnull)getCallbackURIStringFor:(enum CallbackURIType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets a string to use as the Callback URI String. Overwrites the default value provided by
/// the plist. Setting to nil will result in using the default value.
/// If you’re setting a custom value, be sure your app is configured to handle deeplinks
/// from this URI & you’ve added it to the redirect URIs on your Uber developer dashboard
/// \param callbackURIString The callback URI String to use
///
- (void)setCallbackURIString:(NSString * _Nullable)callbackURIString;
/// Sets a string to use as the Callback URI String for the provided CallbackURIType.
/// Overwrites the default value provided by the plist. Setting to nil will result
/// in using the default value.
/// If you’re setting a custom value, be sure your app is configured to handle deeplinks
/// from this URI & you’ve added it to the redirect URIs on your Uber developer dashboard
/// \param callbackURIString The callback URI String to use
///
/// \param type The Callback URI Type to use
///
- (void)setCallbackURIString:(NSString * _Nullable)callbackURIString type:(enum CallbackURIType)type;
@end

@class UBSDKRideParameters;

/// Protocol for an object that defines how to request a ride. Is expected to be used
/// by any control that can request a ride for a user.
SWIFT_PROTOCOL_NAMED("RideRequesting")
@protocol UBSDKRideRequesting
/// Requests a ride using the provided RideParameters.
/// \param parameters The RideParameters to use for the ride request
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)parameters;
@end


SWIFT_CLASS_NAMED("DeeplinkRequestingBehavior")
@interface UBSDKDeeplinkRequestingBehavior : NSObject <UBSDKRideRequesting>
/// Requests a ride using a RequestDeeplink that is constructed using the provided
/// rideParameters
/// \param rideParameters The RideParameters to use for building and executing
/// the deeplink
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)rideParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Estimate information on an Uber trip.
SWIFT_CLASS_NAMED("DistanceEstimate")
@interface UBSDKDistanceEstimate : NSObject
/// Expected activity distance.
@property (nonatomic, readonly) double distance;
/// The unit of distance (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nonnull distanceUnit;
/// Expected activity duration (in seconds).
@property (nonatomic, readonly) NSInteger duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Contains information for an Uber driver dispatched for a ride request.
SWIFT_CLASS_NAMED("Driver")
@interface UBSDKDriver : NSObject
/// The first name of the driver.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL to the photo of the driver.
@property (nonatomic, readonly, copy) NSURL * _Nonnull pictureURL;
/// The formatted phone number for calling the driver.
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// The formatted phone number for sending a SMS to the driver.
@property (nonatomic, readonly, copy) NSString * _Nonnull smsNumber;
/// The driver’s star rating out of 5 stars.
@property (nonatomic, readonly) double rating;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Defines the implicit grant authorization flow where access token is extracted from redirect fragment.
SWIFT_CLASS_NAMED("ImplicitGrantAuthenticator")
@interface UBSDKImplicitGrantAuthenticator : LoginViewAuthenticator
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end

enum RequestButtonColorStyle : NSInteger;

/// Base class for Uber buttons that sets up colors and some constraints.
SWIFT_CLASS_NAMED("UberButton")
@interface UBSDKUberButton : UIButton
@property (nonatomic) enum RequestButtonColorStyle colorStyle;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Function responsible for the initial setup of the button.
/// Calls addSubviews(), setContent(), and setConstraints()
- (void)setup;
/// Function responsible for adding all the subviews to the button. Subclasses
/// should override this method and add any necessary subviews.
- (void)addSubviews;
/// Function responsible for updating content on the button. Subclasses should
/// override and do any necessary view setup
- (void)setContent;
/// Function responsible for adding autolayout constriants on the button. Subclasses
/// should override and add any additional autolayout constraints
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UBSDKLoginButtonDelegate;
@class UBSDKLoginManager;
enum LoginButtonState : NSInteger;

/// Button to handle logging in to Uber
SWIFT_CLASS_NAMED("LoginButton")
@interface UBSDKLoginButton : UBSDKUberButton
/// The LoginButtonDelegate for this button
@property (nonatomic, weak) id <UBSDKLoginButtonDelegate> _Nullable delegate;
/// The LoginManager to use for log in
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// The RidesScopes to request
@property (nonatomic, copy) NSArray<UBSDKRidesScope *> * _Nonnull scopes;
/// The view controller to present login over. Used
@property (nonatomic, strong) UIViewController * _Nullable presentingViewController;
/// The current LoginButtonState of this button (signed in / signed out)
@property (nonatomic, readonly) enum LoginButtonState buttonState;
- (nonnull instancetype)initWithFrame:(CGRect)frame scopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Setup the LoginButton by adding  a target to the button and setting the login completion block
- (void)setup;
/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;
/// Adds the layout constraints for the Login button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)updateConstraints;
@end


/// Protocol to listen to login button events, such as logging in / out
SWIFT_PROTOCOL_NAMED("LoginButtonDelegate")
@protocol UBSDKLoginButtonDelegate
/// The Login Button attempted to log out
/// \param button The LoginButton involved
///
/// \param success True if log out succeeded, false otherwise
///
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didLogoutWithSuccess:(BOOL)success;
/// THe Login Button completed a login
/// \param button The LoginButton involved
///
/// \param accessToken The access token that
///
/// \param error The error that occured
///
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didCompleteLoginWithToken:(UBSDKAccessToken * _Nullable)accessToken error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, LoginButtonState) {
  LoginButtonStateSignedIn = 0,
  LoginButtonStateSignedOut = 1,
};

@class UIApplication;

SWIFT_PROTOCOL("_TtP9UberRides13LoginManaging_")
@protocol LoginManaging
/// Function for initializing a login attempt
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
///
- (void)loginWithRequestedScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable, NSError * _Nullable))completion;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 8 and below)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 9+)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param options A dictionary of URL handling options. As passed to the corresponding AppDelegate method.
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)app open:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
/// Called via the RidesAppDelegate when the application becomes active. Used to determine
/// if a user abandons Native login without getting an access token.
- (void)applicationDidBecomeActive;
@end

enum UBSDKLoginType : NSInteger;

/// Manages user login via SSO, authorization code grant, or implicit grant.
SWIFT_CLASS_NAMED("LoginManager")
@interface UBSDKLoginManager : NSObject <LoginManaging>
/// Optional state to use for explcit grant authorization
@property (nonatomic, copy) NSString * _Nullable state;
/// Create instance of login manager to authenticate user and retreive access token.
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.shared.defaultAccessTokenIdentifier
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.shared.defaultKeychainAccessGroup
///
/// \param loginType The login type to use for logging in, defaults to Implicit
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup loginType:(enum UBSDKLoginType)loginType OBJC_DESIGNATED_INITIALIZER;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Implicit Login Behavior
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.getDefaultKeychainAccessGroup()
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Implicit Login Behavior & your Configuration’s keychain access group
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the provided LoginType, with the accessTokenIdentifier & keychainAccessGroup defined
/// in your Configuration
/// \param loginType The login behavior to use for logging in
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithLoginType:(enum UBSDKLoginType)loginType;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Native LoginType, with the accessTokenIdentifier & keychainAccessGroup defined
/// in your Configuration
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)init;
/// Launches view for user to log into Uber account and grant access to requested scopes.
/// Access token (or error) is passed into completion handler.
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
///
- (void)loginWithRequestedScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable, NSError * _Nullable))completion;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken.
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method (iOS 8)
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method (iOS 8)
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 9+)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param options A dictionary of URL handling options. As passed to the corresponding AppDelegate method.
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)app open:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
/// Called via the RidesAppDelegate when the application becomes active. Used to determine
/// if a user abandons Native login without getting an access token.
- (void)applicationDidBecomeActive;
@end


/// The type of behaviour that login manager should use for authentication.
/// <ul>
///   <li>
///     AuthorizationCode: Authorization code grant.
///   </li>
///   <li>
///     Implicit: Implicit grant (only valid for general scope endpoints).
///   </li>
///   <li>
///     Native:   Native login (SSO via the Uber App)
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKLoginType, "LoginType") {
  UBSDKLoginTypeAuthorizationCode = 0,
  UBSDKLoginTypeImplicit = 1,
  UBSDKLoginTypeNative = 2,
};


/// Login Web View class. Wrapper around a WKWebView to handle Login flow for Implicit Grant
SWIFT_CLASS_NAMED("LoginView")
@interface UBSDKLoginView : UIView
@property (nonatomic, strong) LoginViewAuthenticator * _Nonnull loginAuthenticator;
/// Creates a LoginWebView for obtaining an access token
/// \param loginAuthenticator the login authentication process to use
///
/// \param frame The frame to use for the view, defaults to CGRectZero
///
///
/// returns:
/// An initialized LoginWebView
- (nonnull instancetype)initWithLoginAuthenticator:(LoginViewAuthenticator * _Nonnull)loginAuthenticator frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializer for adding a LoginWebView via Storyboard. If using this constructor,
/// you must add the scopes you want before attempting to call loadLoginPage()
/// \param aDecoder The coder to use
///
///
/// returns:
/// An initialized loginWebView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Loads the login page
- (void)load;
/// Stops loading the login page and clears the view.
/// If the login page has already loaded, calling this still clears the view.
- (void)cancelLoad;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

@interface UBSDKLoginView (SWIFT_EXTENSION(UberRides)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end


@protocol UBSDKModalViewControllerDelegate;
enum ModalViewControllerColorStyle : NSInteger;
enum ModalViewControllerButtonStyle : NSInteger;

/// Convenience to wrap a ViewController in a UINavigationController and add the appropriate buttons. Allows you to modally present a view controller w/ Uber branding.
SWIFT_CLASS_NAMED("ModalViewController")
@interface UBSDKModalViewController : UIViewController
/// The ModalViewControllerDelegate
@property (nonatomic, strong) id <UBSDKModalViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum ModalViewControllerColorStyle colorStyle;
/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController
/// with the appropriate buttons.
/// \param childViewController The child UIViewController to wrap
///
/// \param buttonStyle The ModalViewControllerButtonStyle to use
///
///
/// returns:
/// An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController buttonStyle:(enum ModalViewControllerButtonStyle)buttonStyle OBJC_DESIGNATED_INITIALIZER;
/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController
/// with the appropriate buttons.
/// Defaults to the .DoneButton ModalViewControllerButtonStyle style
/// \param childViewController The child UIViewController to wrap
///
///
/// returns:
/// An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController;
/// Unavailable. ModalViewController doesn’t support being initialized via
/// init(coder:)
///
/// throws:
/// Fatal Error
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;
/// Function to dimiss the modalViewController.
- (void)dismiss;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UBSDKRideRequestViewController;

/// Modal View Controller to use for presenting a RideRequestViewController. Handles errors & closing the modal for you
SWIFT_CLASS_NAMED("ModalRideRequestViewController")
@interface UBSDKModalRideRequestViewController : UBSDKModalViewController
/// The RideRequestViewController this modal is wrapping
@property (nonatomic, readonly, strong) UBSDKRideRequestViewController * _Nonnull rideRequestViewController;
/// Initializer for the ModalRideRequestViewController. Wraps the provided RideRequestViewController
/// and acts as it’s delegate. Will handle errors coming in via the RideRequestViewControllerDelegate
/// and dismiss the modal appropriately
/// \param rideRequestViewController The RideRequestViewController to wrap
///
///
/// returns:
/// An initialized ModalRideRequestViewController
- (nonnull instancetype)initWithRideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController buttonStyle:(enum ModalViewControllerButtonStyle)buttonStyle SWIFT_UNAVAILABLE;
@end


/// Delegate Protocol to pass errors from the internal RideRequestView outward if necessary.
/// For example, you might want to dismiss the View Controller if it experiences an error
SWIFT_PROTOCOL_NAMED("RideRequestViewControllerDelegate")
@protocol UBSDKRideRequestViewControllerDelegate
/// Delegate method to pass on errors from the RideRequestView that can’t be handled
/// by the RideRequestViewController
/// \param rideRequestViewController The RideRequestViewController that experienced the error
///
/// \param error The NSError that was experienced, with a code related to the appropriate RideRequestViewErrorType
///
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKModalRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewControllerDelegate>
/// ModalRideRequestViewController’s implmentation for the RideRequestViewController delegate.
/// \param rideRequestViewController The RideRequestViewController that experienced an error
///
/// \param error The RideRequestViewError that occured
///
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end


/// Possible Styles for the ModalViewController
/// <ul>
///   <li>
///     Empty:       Presents the view modally without any BarButtonItems
///   </li>
///   <li>
///     DoneButton:  Presents the view mdoally with a Done BarButtonItem in the top right corner
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerButtonStyle) {
  ModalViewControllerButtonStyleEmpty = 0,
  ModalViewControllerButtonStyleDoneButton = 1,
  ModalViewControllerButtonStyleBackButton = 2,
};

/// Possible color style for the ModalViewController
/// <ul>
///   <li>
///     Default: Default dark style, dark navigation bar with light text
///   </li>
///   <li>
///     Light:   Light color style, light navigation bar with dark text
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerColorStyle) {
  ModalViewControllerColorStyleDefault = 0,
  ModalViewControllerColorStyleLight = 1,
};


/// The ModalViewControllerDelegate protocol
SWIFT_PROTOCOL_NAMED("ModalViewControllerDelegate")
@protocol UBSDKModalViewControllerDelegate
/// Called before the ModalViewController dismisses the modal.
/// \param modalViewController The ModalViewController that will be dismissed
///
- (void)modalViewControllerWillDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;
/// Called after the ModalViewController is dismissed.
/// \param modalViewController The ModalViewController that was dismissed
///
- (void)modalViewControllerDidDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;
@end


/// UberAuthenticating object for authenticating a user via the Native Uber app
SWIFT_CLASS_NAMED("NativeAuthenticator")
@interface UBSSONativeAuthenticator : UBSDKBaseAuthenticator
/// The completion block to call when the deeplink is completed. Bool indicates if the deeplink was successful
@property (nonatomic, copy) void (^ _Nullable deeplinkCompletion)(NSError * _Nullable);
/// Creates a NativeAuthenticator using the provided scopes
/// \param request the URL request.
///
///
/// returns:
/// true if a redirect was handled, false otherwise.
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKRidesScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PaymentMethod")
@interface UBSDKPaymentMethod : NSObject
/// The account identification or description associated with the payment method.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentDescription;
/// Unique identifier of the payment method.
@property (nonatomic, readonly, copy) NSString * _Nonnull methodID;
/// The type of the payment method. See https://developer.uber.com/docs/v1-payment-methods.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Describes a pre-set place for an Uber account (home or work).
SWIFT_CLASS_NAMED("Place")
@interface UBSDKPlace : NSObject
/// Convenience constant for “home” place ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull home;)
+ (NSString * _Nonnull)home SWIFT_WARN_UNUSED_RESULT;
/// Convenience constant for “work” place ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull work;)
+ (NSString * _Nonnull)work SWIFT_WARN_UNUSED_RESULT;
/// Fully qualified address of the location.
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UBSDKServiceFee;

/// <ul>
///   <li>
///     Contains basic price details for an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PriceDetails")
@interface UBSDKPriceDetails : NSObject
/// Unit of distance used to calculate fare (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nonnull distanceUnit;
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyCode;
/// The charge per minute (if applicable).
@property (nonatomic, readonly) double costPerMinute;
/// The charge per distance unit (if applicable).
@property (nonatomic, readonly) double costPerDistance;
/// The base price.
@property (nonatomic, readonly) double baseFee;
/// The minimum price of a trip.
@property (nonatomic, readonly) double minimumFee;
/// The fee if a rider cancels the trip after a grace period.
@property (nonatomic, readonly) double cancellationFee;
/// Array containing additional fees added to the price. See <code>ServiceFee</code>.
@property (nonatomic, readonly, copy) NSArray<UBSDKServiceFee *> * _Nonnull serviceFees;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Contains information about estimated price range for each Uber product offered at a location.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PriceEstimate")
@interface UBSDKPriceEstimate : NSObject
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// Expected activity distance (in miles). -1 if not present.
@property (nonatomic, readonly) double distance;
/// Expected activity duration (in seconds). UBSDKEstimateUnavailable if not present.
@property (nonatomic, readonly) NSInteger duration;
/// A formatted string representing the estimate in local currency. Could be range, single number, or “Metered” for TAXI.
@property (nonatomic, readonly, copy) NSString * _Nullable estimate;
/// Upper bound of the estimated price. UBSDKEstimateUnavailable if not present.
@property (nonatomic, readonly) NSInteger highEstimate;
/// Lower bound of the estimated price. UBSDKEstimateUnavailable if not present.
@property (nonatomic, readonly) NSInteger lowEstimate;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// The unique identifier of the surge session for a user. Nil for no surge.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;
/// The URL a user must visit to accept surge pricing.
@property (nonatomic, readonly, copy) NSURL * _Nullable surgeConfirmationURL;
/// Expected surge multiplier (active if surge is greater than 1).
@property (nonatomic, readonly) double surgeMultiplier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum UBSDKProductGroup : NSInteger;

/// <ul>
///   <li>
///     Contains information for a single Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("Product")
@interface UBSDKProduct : NSObject
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of product. Ex: “The original Uber”.
@property (nonatomic, readonly, copy) NSString * _Nonnull productDescription;
/// Capacity of product. Ex: 4, for a product that fits 4.
@property (nonatomic, readonly) NSInteger capacity;
/// Image URL representing the product.
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The basic price details. See <code>PriceDetails</code> for structure.
@property (nonatomic, readonly, strong) UBSDKPriceDetails * _Nullable priceDetails;
/// Allows users to get upfront fares, instead of time + distance.
@property (nonatomic, readonly) BOOL upfrontFareEnabled;
/// Specifies whether this product allows cash payments
@property (nonatomic, readonly) BOOL cashEnabled;
/// Specifies whether this product allows for the pickup and drop off of other riders during the trip
@property (nonatomic, readonly) BOOL isShared;
/// The product group that this product belongs to
@property (nonatomic, readonly) enum UBSDKProductGroup productGroup;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Uber Product Category
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKProductGroup, "ProductGroup") {
/// Shared rides products (eg, UberPOOL)
  UBSDKProductGroupRideshare = 0,
/// UberX
  UBSDKProductGroupUberX = 1,
/// UberXL
  UBSDKProductGroupUberXL = 2,
/// UberBLACK
  UBSDKProductGroupUberBlack = 3,
/// UberSUV
  UBSDKProductGroupSuv = 4,
/// 3rd party taxis
  UBSDKProductGroupTaxi = 5,
/// Unknown product group
  UBSDKProductGroupUnknown = 6,
};

typedef SWIFT_ENUM(NSInteger, RequestButtonColorStyle) {
  RequestButtonColorStyleBlack = 0,
  RequestButtonColorStyleWhite = 1,
};


/// Builds and executes a deeplink to the native Uber app to request a ride.
SWIFT_CLASS_NAMED("RequestDeeplink")
@interface UBSDKRequestDeeplink : UBSDKBaseDeeplink
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme domain:(NSString * _Nonnull)domain path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end

@class NSHTTPURLResponse;
@class UBSDKRidesError;

/// <ul>
///   <li>
///     Struct that packages the response from an executed NSURLRequest.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("Response")
@interface UBSDKResponse : NSObject
/// String representing JSON response data.
@property (nonatomic, copy) NSData * _Nullable data;
/// HTTP status code of response.
@property (nonatomic) NSInteger statusCode;
/// Response metadata.
@property (nonatomic, strong) NSHTTPURLResponse * _Nullable response;
/// NSError representing an optional error.
@property (nonatomic, strong) UBSDKRidesError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UBSDKRideRequestLocation;
enum UBSDKRideStatus : NSInteger;
@class UBSDKVehicle;

/// Contains the status of an ongoing/completed trip created using the Ride Request endpoint
SWIFT_CLASS_NAMED("Ride")
@interface UBSDKRide : NSObject
/// Contains the information about the destination of the trip, if one has been set.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable destination;
/// The object that contains driver details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKDriver * _Nullable driver;
/// The object that contains the location information of the vehicle and driver.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable driverLocation;
/// The object containing the information about the pickup for the trip.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable pickup;
/// The unique ID of the Request.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestID;
/// The ID of the product
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
/// The status of the Request indicating state.
@property (nonatomic, readonly) enum UBSDKRideStatus status;
/// The surge pricing multiplier used to calculate the increased price of a Request.
@property (nonatomic, readonly) double surgeMultiplier;
/// The object that contains vehicle details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKVehicle * _Nullable vehicle;
/// True if the ride is an UberPOOL ride. False otherwise.
@property (nonatomic, readonly) BOOL isShared;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Describes the charges made against the rider in a ride receipt.
SWIFT_CLASS_NAMED("RideCharge")
@interface UBSDKRideCharge : NSObject
/// The amount of the charge.
@property (nonatomic, readonly) double amount;
/// The name of the charge.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The type of the charge.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UBSDKUpfrontFare;

/// Contains estimates for a desired ride request.
SWIFT_CLASS_NAMED("RideEstimate")
@interface UBSDKRideEstimate : NSObject
/// Details of the estimated fare.
@property (nonatomic, readonly, strong) UBSDKPriceEstimate * _Nullable priceEstimate;
/// Details of the estimated distance.
@property (nonatomic, readonly, strong) UBSDKDistanceEstimate * _Nullable distanceEstimate;
/// The estimated time of vehicle arrival in minutes. UBSDKEstimateUnavailable if there are no cars available.
@property (nonatomic, readonly) NSInteger pickupEstimate;
/// Upfront Fare for the Ride Estimate.
@property (nonatomic, readonly, strong) UBSDKUpfrontFare * _Nullable fare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Visual representation of a ride request, only available after a request is accepted.
SWIFT_CLASS_NAMED("RideMap")
@interface UBSDKRideMap : NSObject
/// URL to a map representing the requested trip.
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
/// Unique identifier representing a ride request.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CLLocation;
@class UBSDKRideParametersBuilder;

/// Object to represent the parameters needed to request a ride.
SWIFT_CLASS_NAMED("RideParameters")
@interface UBSDKRideParameters : NSObject
/// ProductID to use for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// The pickup location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable pickupLocation;
/// The nickname of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupNickname;
/// The address of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable pickupPlaceID;
/// The dropoff location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable dropoffLocation;
/// The nickname of the dropoff location for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffNickname;
/// The adress of the dropoff location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffPlaceID;
/// The unique identifier of the payment method selected by a user.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentMethod;
/// The unique identifier of the surge session for a user.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;
/// Upfront fare quote used to request a ride
@property (nonatomic, readonly, strong) UBSDKUpfrontFare * _Nullable upfrontFare;
- (UBSDKRideParametersBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("RideParametersBuilder")
@interface UBSDKRideParametersBuilder : NSObject
/// ProductID to use for the ride
@property (nonatomic, copy) NSString * _Nullable productID;
/// The pickup location to use for the ride
@property (nonatomic, strong) CLLocation * _Nullable pickupLocation;
/// The nickname of the pickup location of the ride
@property (nonatomic, copy) NSString * _Nullable pickupNickname;
/// The address of the pickup location of the ride
@property (nonatomic, copy) NSString * _Nullable pickupAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, copy) NSString * _Nullable pickupPlaceID;
/// The dropoff location to use for the ride
@property (nonatomic, strong) CLLocation * _Nullable dropoffLocation;
/// The nickname of the dropoff location for the ride
@property (nonatomic, copy) NSString * _Nullable dropoffNickname;
/// The adress of the dropoff location of the ride
@property (nonatomic, copy) NSString * _Nullable dropoffAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, copy) NSString * _Nullable dropoffPlaceID;
/// The unique identifier of the payment method selected by a user.
@property (nonatomic, copy) NSString * _Nullable paymentMethod;
/// The unique identifier of the surge session for a user.
@property (nonatomic, copy) NSString * _Nullable surgeConfirmationID;
/// Upfront fare quote used to request a ride
@property (nonatomic, strong) UBSDKUpfrontFare * _Nullable upfrontFare;
- (UBSDKRideParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Get the receipt information of a completed request that was made with the request endpoint.
SWIFT_CLASS_NAMED("RideReceipt")
@interface UBSDKRideReceipt : NSObject
/// Adjustments made to the charges such as promotions, and fees.
@property (nonatomic, readonly, copy) NSArray<UBSDKRideCharge *> * _Nonnull chargeAdjustments;
/// ISO 4217
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyCode;
/// Distance of the trip charged.
@property (nonatomic, readonly, copy) NSString * _Nonnull distance;
/// The localized unit of distance.
@property (nonatomic, readonly, copy) NSString * _Nonnull distanceLabel;
/// Time duration of the trip. Use only the hour, minute, and second components.
@property (nonatomic, readonly, copy) NSDateComponents * _Nonnull duration;
/// Unique identifier representing a Request.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestID;
/// The summation of the normal fare and surge charge amount.
@property (nonatomic, readonly, copy) NSString * _Nonnull subtotal;
/// The total amount charged to the users payment method. This is the the subtotal (split if applicable) with taxes included.
@property (nonatomic, readonly, copy) NSString * _Nonnull totalCharged;
/// The total amount still owed after attempting to charge the user. May be 0 if amount was paid in full.
@property (nonatomic, readonly) double totalOwed;
/// The fare after credits and refunds have been applied.
@property (nonatomic, readonly, copy) NSString * _Nonnull totalFare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol UBSDKRideRequestButtonDelegate;
@class UBSDKRidesClient;

/// RequestButton implements a button on the touch screen to request a ride.
SWIFT_CLASS_NAMED("RideRequestButton")
@interface UBSDKRideRequestButton : UBSDKUberButton
/// Delegate is informed of events that occur with request button.
@property (nonatomic, strong) id <UBSDKRideRequestButtonDelegate> _Nullable delegate;
/// The RideParameters object this button will use to make a request
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;
/// The RideRequesting object the button will use to make a request
@property (nonatomic, strong) id <UBSDKRideRequesting> _Nonnull requestBehavior;
/// The RidesClient used for retrieving metadata for the button.
@property (nonatomic, strong) UBSDKRidesClient * _Nullable client;
/// Initializer to use in storyboard. Must call setRidesClient for request button to show metadata.
/// requestBehavior defaults to DeeplinkRequestingBehavior
/// rideParameters defaults to RideParameters with pickup location set to current location
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The Request button initializer.
/// \param client The RidesClient to use for getting button metadata
///
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior OBJC_DESIGNATED_INITIALIZER;
/// The Request button initializer.
/// Uses a default RidesClient
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;
/// The RideRequestButton initializer.
/// Uses DeeplinkRequestingBehavior by default
/// Defaults to using the current location for pickup
/// \param client The RidesClient to use for getting button metadata
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client;
/// The RideRequestButton initializer. Creates a request button that uses the Deeplink
/// Requesting behavior & the provided RidesParameters
/// Uses a default RidesClient
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;
/// The RideRequestButton initializer.
/// Defaults to using the current location for pickup
/// Uses a default RidesClient
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRequestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;
/// The Request button initializer.
/// Defaults to using the current location for pickup
/// Defaults to DeeplinkRequestingBehavior, which links into the Uber app
/// Uses a default RidesClient
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)init;
/// Setup the RideRequestButton by adding  a target to the button and setting the login completion block
- (void)setup;
/// Adds the Metadata Label to the button
- (void)addSubviews;
/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;
/// Adds the layout constraints for the ride request button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Manual refresh for the ride information on the button. The product ID must be set in order to show any metadata.
- (void)loadRideInformation;
@end


/// Protocol to listen to request button events, such as loading button content
SWIFT_PROTOCOL_NAMED("RideRequestButtonDelegate")
@protocol UBSDKRideRequestButtonDelegate
/// The button finished loading ride information successfully.
/// \param button the RideRequestButton
///
- (void)rideRequestButtonDidLoadRideInformation:(UBSDKRideRequestButton * _Nonnull)button;
/// The button encountered an error when refreshing its metadata content.
/// \param button the RideRequestButton
///
/// \param error the error that it encountered
///
- (void)rideRequestButton:(UBSDKRideRequestButton * _Nonnull)button didReceiveError:(UBSDKRidesError * _Nonnull)error;
@end


/// Location of a pickup or destination in a ride request.
SWIFT_CLASS_NAMED("RideRequestLocation")
@interface UBSDKRideRequestLocation : NSObject
/// The alias from an Uber user’s profile mapped to the pickup address (if available).
/// Can be either work or home. Only exposed with a valid access token for places scope.
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// The name of the pickup place (if available). Not exposed in sandbox.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The current bearing in degrees for a moving location. UBSDKBearingUnavailable if not present.
@property (nonatomic, readonly) NSInteger objc_bearing;
/// ETA is only available when the trips is accepted or arriving. -1 if not present.
@property (nonatomic, readonly) NSInteger objc_eta;
/// The latitude of the location.
@property (nonatomic, readonly) double latitude;
/// The longitude of the location.
@property (nonatomic, readonly) double longitude;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@protocol UBSDKRideRequestViewDelegate;

/// A view that shows the embedded Uber experience.
SWIFT_CLASS_NAMED("RideRequestView")
@interface UBSDKRideRequestView : UIView
/// The RideRequestViewDelegate of this view.
@property (nonatomic, strong) id <UBSDKRideRequestViewDelegate> _Nullable delegate;
/// The access token used to authorize the web view
@property (nonatomic, strong) UBSDKAccessToken * _Nullable accessToken;
/// Ther RideParameters to use for prefilling the RideRequestView
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;
/// Initializes to show the embedded Uber ride request view.
/// \param rideParameters The RideParameters to use for presetting values; defaults to using the current location for pickup
///
/// \param accessToken specific access token to use with web view; defaults to using TokenManager’s default token
///
/// \param frame frame of the view. Defaults to CGRectZero
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters accessToken:(UBSDKAccessToken * _Nullable)accessToken frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes to show the embedded Uber ride request view.
/// Uses the TokenManager’s default accessToken
/// \param rideParameters The RideParameters to use for presetting values
///
/// \param frame frame of the view
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters frame:(CGRect)frame;
/// Initializes to show the embedded Uber ride request view.
/// Frame defaults to CGRectZero
/// Uses the TokenManager’s default accessToken
/// \param rideParameters The RideParameters to use for presetting values
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;
/// Initializes to show the embedded Uber ride request view.
/// Uses the current location for pickup
/// Uses the TokenManager’s default accessToken
/// \param frame frame of the view
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Initializes to show the embedded Uber ride request view.
/// Uses the current location for pickup
/// Uses the TokenManager’s default accessToken
/// Frame defaults to CGRectZero
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load the Uber Ride Request Widget view.
/// Requires that the access token has been retrieved.
- (void)load;
/// Stop loading the Ride Request Widget View and clears the view.
/// If the view has already loaded, calling this still clears the view.
- (void)cancelLoad;
@end

@class UIScrollView;

@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("RideRequestViewController")
@interface UBSDKRideRequestViewController : UIViewController
/// The RideRequestViewControllerDelegate to handle the errors
@property (nonatomic, strong) id <UBSDKRideRequestViewControllerDelegate> _Nullable delegate;
/// The LoginManager to use for managing the login process
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// Initializes a RideRequestViewController using the provided coder. By default,
/// uses the default token identifier and access group
/// \param aDecoder The Coder to use
///
///
/// returns:
/// An initialized RideRequestViewController, or nil if something went wrong
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Designated initializer for the RideRequestViewController.
/// \param rideParameters The RideParameters to use for prefilling the RideRequestView.
///
/// \param loginManager The LoginManger to use for logging in (if required). Also uses its values for token identifier & access group to check for an access token
///
///
/// returns:
/// An initialized RideRequestViewController
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Delegates are informed of events that occur in the RideRequestView such as errors.
SWIFT_PROTOCOL_NAMED("RideRequestViewDelegate")
@protocol UBSDKRideRequestViewDelegate
/// An error has occurred in the Ride Request Control.
/// \param rideRequestView the RideRequestView
///
/// \param error the NSError that occured, with a code of RideRequestViewErrorType
///
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewDelegate>
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end



/// Possible errors that can occur in the RideRequestView.
/// <ul>
///   <li>
///     accessTokenMissing:         There is no access token to make the request with
///   </li>
///   <li>
///     accessTokenExpired:         Access token has expired.
///   </li>
///   <li>
///     invalidRequest:             The requested endpoint was invalid
///   </li>
///   <li>
///     networkError:               A network error occured
///   </li>
///   <li>
///     notSupported:               The functionality attempted is not supported on the current device
///   </li>
///   <li>
///     unknown:                    Unknown error occured.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RideRequestViewErrorType) {
  RideRequestViewErrorTypeAccessTokenExpired = 0,
  RideRequestViewErrorTypeAccessTokenMissing = 1,
  RideRequestViewErrorTypeInvalidRequest = 2,
  RideRequestViewErrorTypeNetworkError = 3,
  RideRequestViewErrorTypeNotSupported = 4,
  RideRequestViewErrorTypeUnknown = 5,
};


/// A RideRequesting object for requesting a ride via the RideRequestViewController
SWIFT_CLASS_NAMED("RideRequestViewRequestingBehavior")
@interface UBSDKRideRequestViewRequestingBehavior : NSObject
/// The UIViewController to present the RideRequestViewController over
@property (nonatomic, assign) UIViewController * _Nonnull presentingViewController;
/// The LoginManager to use with the RideRequestViewController. Uses the
/// accessTokenIdentifier & keychainAccessGroup to get an AccessToken. Will be used
/// to log a user in, if necessary
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// The ModalRideRequestViewController that is created by this behavior, only exists after requestRide() is called
@property (nonatomic, readonly, strong) UBSDKModalRideRequestViewController * _Nonnull modalRideRequestViewController;
/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller.
/// This view controller will be used to modally present the ModalRideRequestViewController
/// when this behavior is executed
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
/// \param loginManager The LoginManager to use for managing the AccessToken for the RideRequestView
///
///
/// returns:
/// An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller.
/// This view controller will be used to modally present the ModalRideRequestViewController
/// when this behavior is executed
/// Uses a default LoginManager() for login & token management
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
///
/// returns:
/// An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UBSDKRideRequestViewRequestingBehavior (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequesting>
/// Requests a ride by presenting a RideRequestView that is constructed using the provided
/// rideParameters
/// \param parameters The RideParameters to use for building and prefilling
/// the RideRequestView
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)rideParameters;
@end


/// The status of a ride.
/// <ul>
///   <li>
///     Accepted:           The request was accepted by a driver and “en route” to start location.
///   </li>
///   <li>
///     Arriving:           The driver has arrived or will be shortly.
///   </li>
///   <li>
///     Completed:          Ride has been completed.
///   </li>
///   <li>
///     DriverCanceled:     Ride request has been canceled by the driver.
///   </li>
///   <li>
///     InProgress:         The ride is “en route” from the start location to the end location.
///   </li>
///   <li>
///     NoDriversAvailable: The ride request was unfulfilled because no drivers were available.
///   </li>
///   <li>
///     Processing:         The ride request is matching to the best available driver.
///   </li>
///   <li>
///     RiderCanceled:      The ride request was canceled by rider.
///   </li>
///   <li>
///     Unknown:            An unexpected status.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKRideStatus, "RideStatus") {
  UBSDKRideStatusAccepted = 0,
  UBSDKRideStatusArriving = 1,
  UBSDKRideStatusCompleted = 2,
  UBSDKRideStatusDriverCanceled = 3,
  UBSDKRideStatusInProgress = 4,
  UBSDKRideStatusNoDriversAvailable = 5,
  UBSDKRideStatusProcessing = 6,
  UBSDKRideStatusRiderCanceled = 7,
  UBSDKRideStatusUnknown = 8,
};


/// Responsible for parsing any events that require switching to the Uber app.
/// Designed to mimic methods from your application’s AppDelegate and should
/// be called inside their corresponding methods
SWIFT_CLASS_NAMED("RidesAppDelegate")
@interface UBSDKRidesAppDelegate : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesAppDelegate * _Nonnull shared;)
+ (UBSDKRidesAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <LoginManaging> _Nullable loginManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Handles parsing a deeplink that can be handled by the Rides SDK. Should be
/// be called in your ApplicationDelegate:
/// application:openURL:sourceApplication:annotation: (iOS 8)
/// OR
/// app:openURL:options: (iOS 9+), passing in options[UIApplicationOpenURLOptionsSourceApplicationKey] as sourceApplication
/// \param application Your singleton app object. As passed to the corresponding AppDelegate method
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting
/// your app to open the URL (url). As passed to the corresponding AppDelegate method (iOS 8) or
/// options[UIApplicationOpenURLOptionsSourceApplicationKey] (iOS 9+)
///
/// \param annotation A property list object supplied by the source app to
/// communicate information to the receiving app As passed to the corresponding AppDelegate method
///
///
/// returns:
/// true if the URL was intended for the Rides SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
@end

/// Possible authentication errors.
/// <ul>
///   <li>
///     AccessDenied:            The user denied the requested scopes.
///   </li>
///   <li>
///     ExpiredJWT:              The scope accept session expired.
///   </li>
///   <li>
///     GeneralError:            A general error occured.
///   </li>
///   <li>
///     InternalServerError:     An internal server error occured.
///   </li>
///   <li>
///     InvalidAppSignature:     The provided app signature did not match what was expected.
///   </li>
///   <li>
///     InvalidAuthCode:         There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidClientID:         Invalid client ID provided for authentication.
///   </li>
///   <li>
///     InvalidFlowError:        There was a problem displaying the authorize screen.
///   </li>
///   <li>
///     InvalidJWT:              There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidJWTSignature:     There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidNonce:            There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidRedirect:         Redirect URI provided was invalid
///   </li>
///   <li>
///     InvalidRefreshToken:     The provided Refresh Token was invalid
///   </li>
///   <li>
///     InvalidRequest:          General case for invalid requests.
///   </li>
///   <li>
///     InvalidResponse:         The response from the server was un-parseable
///   </li>
///   <li>
///     InvalidScope:            Scopes provided contains an invalid scope.
///   </li>
///   <li>
///     InvalidSSOResponse:      The server responded with an invalid response.
///   </li>
///   <li>
///     InvalidUserID:           There was a problem with your user ID.
///   </li>
///   <li>
///     MalformedRequest:        There was a problem loading the authorize screen.
///   </li>
///   <li>
///     MismatchingRedirect:     Redirect URI provided doesn’t match one registered for client ID.
///   </li>
///   <li>
///     NetworkError:            A network error occured
///   </li>
///   <li>
///     ServerError:             A server error occurred during authentication.
///   </li>
///   <li>
///     UnableToPresentLogin:    Unable to present the login screen
///   </li>
///   <li>
///     UnableToSaveAccessToken: There was a problem saving the access token
///   </li>
///   <li>
///     Unavailable:             Authentication services temporarily unavailable.
///   </li>
///   <li>
///     UserCancelled:           User cancelled the auth process
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RidesAuthenticationErrorType) {
  RidesAuthenticationErrorTypeAccessDenied = 0,
  RidesAuthenticationErrorTypeExpiredJWT = 1,
  RidesAuthenticationErrorTypeGeneralError = 2,
  RidesAuthenticationErrorTypeInternalServerError = 3,
  RidesAuthenticationErrorTypeInvalidAppSignature = 4,
  RidesAuthenticationErrorTypeInvalidAuthCode = 5,
  RidesAuthenticationErrorTypeInvalidClientID = 6,
  RidesAuthenticationErrorTypeInvalidFlowError = 7,
  RidesAuthenticationErrorTypeInvalidJWT = 8,
  RidesAuthenticationErrorTypeInvalidJWTSignature = 9,
  RidesAuthenticationErrorTypeInvalidNonce = 10,
  RidesAuthenticationErrorTypeInvalidRedirect = 11,
  RidesAuthenticationErrorTypeInvalidRefreshToken = 12,
  RidesAuthenticationErrorTypeInvalidRequest = 13,
  RidesAuthenticationErrorTypeInvalidResponse = 14,
  RidesAuthenticationErrorTypeInvalidScope = 15,
  RidesAuthenticationErrorTypeInvalidSSOResponse = 16,
  RidesAuthenticationErrorTypeInvalidUserID = 17,
  RidesAuthenticationErrorTypeMalformedRequest = 18,
  RidesAuthenticationErrorTypeMismatchingRedirect = 19,
  RidesAuthenticationErrorTypeNetworkError = 20,
  RidesAuthenticationErrorTypeServerError = 21,
  RidesAuthenticationErrorTypeUnableToPresentLogin = 22,
  RidesAuthenticationErrorTypeUnableToSaveAccessToken = 23,
  RidesAuthenticationErrorTypeUnavailable = 24,
  RidesAuthenticationErrorTypeUserCancelled = 25,
};

@class NSURLSessionConfiguration;
@class UBSDKTimeEstimate;
@class UBSDKTripHistory;
@class UBSDKUserProfile;

/// API client for the Uber Rides API.
SWIFT_CLASS_NAMED("RidesClient")
@interface UBSDKRidesClient : NSObject
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken. Defaults
/// to the value set in your Configuration struct
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup OBJC_DESIGNATED_INITIALIZER;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
/// \param accessTokenIdentifier Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the accessTokenIdentifier & keychainAccessGroup
/// defaults from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)init;
/// Retrieves the token used by this rides client.
/// Currently pulls from the keychain each time.
///
/// returns:
/// an AccessToken object, or nil if one can’t be located
- (UBSDKAccessToken * _Nullable)fetchAccessToken SWIFT_WARN_UNUSED_RESULT;
/// Public getter to check for the existence of a server token.
///
/// returns:
/// true if a server token exists, false otherwise.
@property (nonatomic, readonly) BOOL hasServerToken;
/// Get all products at specified location.
/// \param location coordinates of pickup location
///
/// \param completion completion handler for returned products.
///
- (void)fetchProductsWithPickupLocation:(CLLocation * _Nonnull)location completion:(void (^ _Nonnull)(NSArray<UBSDKProduct *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get information for specific product.
/// \param productID string representing product ID.
///
/// \param completion completion handler for returned product.
///
- (void)fetchProductWithProductID:(NSString * _Nonnull)productID completion:(void (^ _Nonnull)(UBSDKProduct * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get time estimates for all products (or specific product) at specified pickup location.
/// \param pickupLocation coordinates of pickup location
///
/// \param productID optional string representing the productID.
///
/// \param completion completion handler for returned estimates.
///
- (void)fetchTimeEstimatesWithPickupLocation:(CLLocation * _Nonnull)location productID:(NSString * _Nullable)productID completion:(void (^ _Nonnull)(NSArray<UBSDKTimeEstimate *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get price estimates for all products between specified pickup and dropoff locations.
/// \param pickupLocation coordinates of pickup location.
///
/// \param dropoffLocation coordinates of dropoff location
///
/// \param completion completion handler for returned estimates.
///
- (void)fetchPriceEstimatesWithPickupLocation:(CLLocation * _Nonnull)pickupLocation dropoffLocation:(CLLocation * _Nonnull)dropoffLocation completion:(void (^ _Nonnull)(NSArray<UBSDKPriceEstimate *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get trip history for current authenticated user.
/// \param offset offset the list of returned results by this amount. Default is zero.
///
/// \param limit number of items to retrieve. Default is 5, maximum is 50.
///
/// \param completion completion handler for returned user trip history.
///
- (void)fetchTripHistoryWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(UBSDKTripHistory * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Gets user profile of current authenticated user.
/// \param completion completion handler for returned user profile.
///
- (void)fetchUserProfileWithCompletion:(void (^ _Nonnull)(UBSDKUserProfile * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Request a ride on behalf of Uber user.
/// \param parameters RideParameters object containing paramaters for the request.
///
/// \param completion completion handler for returned request information.
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nonnull)parameters completion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get the real-time details for an ongoing ride.
/// \param completion completion handler for returned ride information.
///
- (void)fetchCurrentRideWithCompletion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get the status of an ongoing or completed ride that was created using the Ride Request endpoint.
/// \param requestID unique identifier representing a Request.
///
/// \param completion completion handler for returned trip information.
///
- (void)fetchRideDetailsWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Estimate a ride request given the desired product, start, and end locations.
/// \param rideParameters RideParameters object containing necessary information.
///
/// \param completion completion handler for returned estimate.
///
- (void)fetchRideRequestEstimateWithParameters:(UBSDKRideParameters * _Nonnull)parameters completion:(void (^ _Nonnull)(UBSDKRideEstimate * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Retrieve the list of the user’s available payment methods.
/// \param completion completion handler for returned payment method list as well as last used payment method.
///
- (void)fetchPaymentMethodsWithCompletion:(void (^ _Nonnull)(NSArray<UBSDKPaymentMethod *> * _Nonnull, UBSDKPaymentMethod * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Retrieve home and work addresses from an Uber user’s profile.
/// \param placeID the name of the place to retrieve. Only home and work are acceptable.
///
/// \param completion completion handler for returned place.
///
- (void)fetchPlaceWithPlaceID:(NSString * _Nonnull)placeID completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Update home and work addresses for an Uber user’s profile.
/// \param placeID the name of the place to update. Only home and work are acceptable.
///
/// \param address the address of the place that should be tied to the given placeID.
///
/// \param completion completion handler for response.
///
- (void)updatePlaceWithPlaceID:(NSString * _Nonnull)placeID withAddress:(NSString * _Nonnull)address completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Update the ride details for an ongoing ride by ID.
/// \param requestID the ID of the ride request. If nil, will attempt to update current trip.
///
/// \param rideParameters the RideParameters object containing the updated parameters.
///
/// \param completion completion handler for response.
///
- (void)updateRideDetailsWithRequestID:(NSString * _Nullable)requestID rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Update an ongoing request’s destination that was requested using the Ride Request endpoint.
/// \param rideParameters RideParameters object with updated ride parameters.
///
/// \param completion completion handler for response.
///
- (void)updateCurrentRideWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Cancel a user’s ride using the request ID.
/// \param requestID request ID of the ride. If nil, current ride will be canceled.
///
/// \param completion completion handler for response.
///
- (void)cancelRideWithRequestID:(NSString * _Nullable)requestID completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Cancel the user’s current trip. This endpoint can only be used on trips that your app requested.
/// \param completion completion handler for response
///
- (void)cancelCurrentRideWithCompletion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Get the receipt information of a completed request.
/// \param requestID unique identifier representing a ride request
///
/// \param completion completion handler for receipt
///
- (void)fetchRideReceiptWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideReceipt * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get a map with a visual representation of a Request.
/// \param requestID unique identifier representing a request
///
/// \param completion completion handler for map
///
- (void)fetchRideMapWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideMap * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get a refreshed AccessToken from a refresh token string. Only works for access
/// tokens retrieved via SSO
/// \param refreshToken The Refresh Token String from an SSO access token
///
/// \param completion completion handler for the new access token
///
- (void)refreshAccessTokenUsingRefreshToken:(NSString * _Nonnull)refreshToken completion:(void (^ _Nonnull)(UBSDKAccessToken * _Nullable, UBSDKResponse * _Nonnull))completion;
@end


/// Base class for errors that can be mapped from HTTP responses.
SWIFT_CLASS_NAMED("RidesError")
@interface UBSDKRidesError : NSObject
/// HTTP status code for error.
@property (nonatomic, readonly) NSInteger status;
/// Human readable message which corresponds to the client error.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Underscore delimited string.
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// Additional information about errors. Can be “fields” or “meta” as the key.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable meta;
/// List of additional errors. This can be populated instead of status/code/title.
@property (nonatomic, readonly, copy) NSArray<UBSDKRidesError *> * _Nullable errors;
/// Convenience initializer.
/// \param status The Status code to use for this error
///
/// \param code The underscore delimited code string to use for this error
///
/// \param title Human readable message which corresponds to this error
///
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Client error 4xx.
SWIFT_CLASS_NAMED("RidesClientError")
@interface UBSDKRidesClientError : UBSDKRidesError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end


enum RidesScopeType : NSInteger;
enum ScopeType : NSInteger;

/// Object representing an access scope to the Uber API
SWIFT_CLASS_NAMED("RidesScope")
@interface UBSDKRidesScope : NSObject
/// The RidesScopeType of this RidesScope
@property (nonatomic, readonly) enum RidesScopeType ridesScopeType;
/// The ScopeType of this RidesScope (General / Privileged)
@property (nonatomic, readonly) enum ScopeType scopeType;
/// The String raw value of the scope
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithRidesScopeType:(enum RidesScopeType)ridesScopeType OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Convenience variable for the AllTrips scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull allTrips;)
+ (UBSDKRidesScope * _Nonnull)allTrips SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the History scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull history;)
+ (UBSDKRidesScope * _Nonnull)history SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the HistoryLite scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull historyLite;)
+ (UBSDKRidesScope * _Nonnull)historyLite SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Places scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull places;)
+ (UBSDKRidesScope * _Nonnull)places SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Profile scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull profile;)
+ (UBSDKRidesScope * _Nonnull)profile SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Request scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull request;)
+ (UBSDKRidesScope * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the RequestReceipt scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull requestReceipt;)
+ (UBSDKRidesScope * _Nonnull)requestReceipt SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the RideWidgets scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKRidesScope * _Nonnull rideWidgets;)
+ (UBSDKRidesScope * _Nonnull)rideWidgets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Scopes control the various API endpoints your application can access.
/// <ul>
///   <li>
///     AllTrips:       Get details of the trip the user is currently taking.
///   </li>
///   <li>
///     History:        Pull trip data of a user’s historical pickups and drop-offs.
///   </li>
///   <li>
///     HistoryLite:    Same as History without city information.
///   </li>
///   <li>
///     Places:         Save and retrieve user’s favorite places.
///   </li>
///   <li>
///     Profile:        Access basic profile information on a user’s Uber account.
///   </li>
///   <li>
///     Request:        Make requests for Uber rides on behalf of users.
///   </li>
///   <li>
///     RideReceipt:    Get receipt details for requests made by application.
///   </li>
///   <li>
///     RideWidgets:    The scope for using the Ride Request Widget.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RidesScopeType) {
  RidesScopeTypeAllTrips = 0,
  RidesScopeTypeHistory = 1,
  RidesScopeTypeHistoryLite = 2,
  RidesScopeTypePlaces = 3,
  RidesScopeTypeProfile = 4,
  RidesScopeTypeRequest = 5,
  RidesScopeTypeRequestReceipt = 6,
  RidesScopeTypeRideWidgets = 7,
};


/// Server error 5xx.
SWIFT_CLASS_NAMED("RidesServerError")
@interface UBSDKRidesServerError : UBSDKRidesError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end


/// Unknown error type.
SWIFT_CLASS_NAMED("RidesUnknownError")
@interface UBSDKRidesUnknownError : UBSDKRidesError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end

/// Category of scope that describes its level of access.
/// <ul>
///   <li>
///     General:    scopes that can be used without review.
///   </li>
///   <li>
///     Privileged: scopes that require approval before opened to your users in production.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ScopeType) {
  ScopeTypeGeneral = 0,
  ScopeTypePrivileged = 1,
};


/// <ul>
///   <li>
///     Contains information for additional fees that can be added to the price of an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ServiceFee")
@interface UBSDKServiceFee : NSObject
/// The name of the service fee.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The amount of the service fee.
@property (nonatomic, readonly) double fee;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Contains information regarding the ETA of an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TimeEstimate")
@interface UBSDKTimeEstimate : NSObject
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// ETA for the product (in seconds).
@property (nonatomic, readonly) NSInteger estimate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Manager class for saving and deleting AccessTokens. Allows you to manage tokens based on token identifier & keychain access group
SWIFT_CLASS_NAMED("TokenManager")
@interface UBSDKTokenManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenManagerDidSaveTokenNotification;)
+ (NSString * _Nonnull)tokenManagerDidSaveTokenNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenManagerDidDeleteTokenNotification;)
+ (NSString * _Nonnull)tokenManagerDidDeleteTokenNotification SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken for the given tokenIdentifier and accessGroup.
/// \param identifier The token identifier string to use
///
/// \param accessGroup The keychain access group to use
///
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchTokenWithIdentifier:(NSString * _Nonnull)identifier accessGroup:(NSString * _Nonnull)accessGroup SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken for the given tokenIdentifier.
/// Uses the default value for keychain access group, as defined by your Configuration.
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchTokenWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken using the default tokenIdentifier and accessGroup.
/// These values are the defined in your Configuration
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchToken SWIFT_WARN_UNUSED_RESULT;
/// Saves the given AccessToken using the provided tokenIdentifier and acessGroup.If no values
/// are supplied, it uses the defaults defined in your Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.shared.defaultAccessTokenIdentifier)
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.shared.defaultKeychainAccessGroup)
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier accessGroup:(NSString * _Nonnull)accessGroup SWIFT_WARN_UNUSED_RESULT;
/// Saves the given AccessToken using the provided tokenIdentifier.
/// Uses the default keychain access group defined by your Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Saves the given AccessToken.
/// Uses the default access token identifier & keychain access group defined by your
/// Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Deletes the AccessToken for the givent tokenIdentifier and accessGroup. If no values
/// are supplied, it uses the defaults defined in your Configuration.
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.shared.defaultAccessTokenIdentifier)
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.shared.defaultKeychainAccessGroup)
///
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteTokenWithIdentifier:(NSString * _Nonnull)identifier accessGroup:(NSString * _Nonnull)accessGroup SWIFT_WARN_UNUSED_RESULT;
/// Deletes the AccessToken for the given tokenIdentifier.
/// Uses the default keychain access group defined in your Configuration.
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteTokenWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Deletes an AccessToken.
/// Uses the default token identifier defined in your Configuration.
/// Uses the default keychain access group defined in your Configuration.
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteToken SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <ul>
///   <li>
///     Information relating to a city in a trip activity.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TripCity")
@interface UBSDKTripCity : NSObject
/// Latitude of city location.
@property (nonatomic, readonly) double latitude;
/// Longitude of city location.
@property (nonatomic, readonly) double longitude;
/// Display name of city.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UBSDKUserActivity;

/// <ul>
///   <li>
///     User’s lifetime trip activity with Uber.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TripHistory")
@interface UBSDKTripHistory : NSObject
/// Position in pagination.
@property (nonatomic, readonly) NSInteger offset;
/// Number of items retrieved.
@property (nonatomic, readonly) NSInteger limit;
/// Total number of items available.
@property (nonatomic, readonly) NSInteger count;
/// Array of trip information.
@property (nonatomic, readonly, copy) NSArray<UBSDKUserActivity *> * _Nonnull history;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@class UBSDKUpfrontFareComponent;

SWIFT_CLASS_NAMED("UpfrontFare")
@interface UBSDKUpfrontFare : NSObject
/// A unique upfront fare identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull fareID;
/// The total upfront fare value.
@property (nonatomic, readonly) double value;
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyCode;
/// Formatted string of estimate in local currency.
@property (nonatomic, readonly, copy) NSString * _Nonnull display;
/// The upfront fare expiration time
@property (nonatomic, readonly, copy) NSDate * _Nonnull expiresAt;
/// The components that make up the upfront fare
@property (nonatomic, readonly, copy) NSArray<UBSDKUpfrontFareComponent *> * _Nonnull breakdown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum UBSDKUpfrontFareComponentType : NSInteger;

SWIFT_CLASS_NAMED("UpfrontFareComponent")
@interface UBSDKUpfrontFareComponent : NSObject
/// Upfront fare type
@property (nonatomic, readonly) enum UBSDKUpfrontFareComponentType type;
/// Value of the upfront fare component
@property (nonatomic, readonly) double value;
/// A string that can be displayed to the user representing this portion of the fare
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKUpfrontFareComponentType, "UpfrontFareComponentType") {
/// Base fare
  UBSDKUpfrontFareComponentTypeBaseFare = 0,
/// Promotion adjustment
  UBSDKUpfrontFareComponentTypePromotion = 1,
/// Unknown case.
  UBSDKUpfrontFareComponentTypeUnknown = 2,
};


/// <ul>
///   <li>
///     Information regarding an Uber trip in a user’s activity history.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("UserActivity")
@interface UBSDKUserActivity : NSObject
/// Length of activity in miles.
@property (nonatomic, readonly) double distance;
/// Represents timestamp of activity request time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nonnull requestTime;
/// Represents timestamp of activity start time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nonnull startTime;
/// Represents timestamp of activity end time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nonnull endTime;
/// City that activity started in.
@property (nonatomic, readonly, strong) UBSDKTripCity * _Nonnull startCity;
/// Unique activity identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull requestID;
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nonnull productID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     Information regarding an Uber user.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("UserProfile")
@interface UBSDKUserProfile : NSObject
/// First name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Last name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Email address of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Image URL of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable picturePath;
/// Promo code of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable promoCode;
/// Unique identifier of the Uber user. Deprecated, use riderID instead.
@property (nonatomic, readonly, copy) NSString * _Nonnull UUID;
/// Unique identifier of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nonnull riderID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Contains information for an Uber driver’s car.
SWIFT_CLASS_NAMED("Vehicle")
@interface UBSDKVehicle : NSObject
/// The license plate number of the vehicle.
@property (nonatomic, readonly, copy) NSString * _Nonnull licensePlate;
/// The vehicle make or brand.
@property (nonatomic, readonly, copy) NSString * _Nonnull make;
/// The vehicle model or type.
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
/// The URL to a stock photo of the vehicle
@property (nonatomic, readonly, copy) NSURL * _Nullable pictureURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
